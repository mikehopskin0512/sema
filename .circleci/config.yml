version: '2.1'
orbs:
  slack: circleci/slack@4.4
jobs:
  deploy-web:
    environment:
      AWS_REGION: us-east-1
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - run:
          name: install utilities
          command: sudo apt-get update -y && sudo apt-get install awscli -y && sudo apt-get install jq -y
      - setup_remote_docker:
          version: 18.09.3
      - run:
          name: create phoenix profile for aws cli
          command: printf "%s\n%s\n"${AWS_REGION}"\njson" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" | aws configure --profile phoenix
      - run:
          name: set deployment environment
          command: |
            if [ $CIRCLE_BRANCH = "master" ]; then
              echo 'export ENV=prod' >> $BASH_ENV
            elif [ $CIRCLE_BRANCH = "qa" ]; then
              echo 'export ENV=qa' >> $BASH_ENV
            elif [[ "$CIRCLE_BRANCH" == "release"* ]]; then
              echo 'export ENV=staging' >> $BASH_ENV
            fi
      - run:
          name: build and deploy phoenix/web
          command: cd web && ./build-and-deploy.sh $ENV
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: "phoenix-circleci-notifications"
  test-web:
    environment:
      AWS_REGION: us-east-1
    docker:
      - image: cimg/node:15.14.0
    steps:
      - checkout
      - run: git checkout test-automation
      - run:
          name: install utilities
          command: sudo apt-get update -y && sudo apt-get install awscli -y
      - setup_remote_docker:
          version: 18.09.3
      - run:
          name: create phoenix profile for aws cli
          command: printf "%s\n%s\n"${AWS_REGION}"\njson" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" | aws configure --profile phoenix
      - run:
          name: set deployment environment
          command: |
            if [ $CIRCLE_BRANCH = "master" ]; then
              echo 'export ENV=prod' >> $BASH_ENV
            elif [ $CIRCLE_BRANCH = "qa" ]; then
              echo 'export ENV=qa' >> $BASH_ENV
            elif [[ "$CIRCLE_BRANCH" == "release"* ]]; then
              echo 'export ENV=staging' >> $BASH_ENV
            elif [[ "$CIRCLE_BRANCH" == "DVPS-125" ]]; then
              echo 'export ENV=staging' >> $BASH_ENV
            fi
      - run: 
          name: Waiting until web and apollo get stable
          command: |
            aws ecs wait services-stable --profile phoenix --cluster "${ENV}-frontend" \
                --services apollo phoenix
      - run: 
          name: install dependencies
          command: |
            npm install
          working_directory: web/e2e-tests
      - run: 
          name: run tests
          command: |
            npm run wdio -- --cucumberOpts.tagExpression='@parser'
          working_directory: web/e2e-tests
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: "phoenix-circleci-notifications"

  deploy-apollo:
    environment:
      AWS_REGION: us-east-1
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - run:
          name: install utilities
          command: sudo apt-get update -y && sudo apt-get install awscli -y && sudo apt-get install jq -y
      - setup_remote_docker:
          version: 18.09.3
      - run:
          name: create phoenix profile for aws cli
          command: printf "%s\n%s\n"${AWS_REGION}"\njson" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" | aws configure --profile phoenix
      - run:
          name: set deployment environment
          command: |
            if [ $CIRCLE_BRANCH = "master" ]; then
              echo 'export ENV=prod' >> $BASH_ENV
            elif [ $CIRCLE_BRANCH = "qa" ]; then
              echo 'export ENV=qa' >> $BASH_ENV
            elif [[ "$CIRCLE_BRANCH" == "release"* ]]; then
              echo 'export ENV=staging' >> $BASH_ENV
            fi
      - run:
          name: build and deploy apollo
          command: cd apollo && ./build-and-deploy.sh $ENV
      - run: 
          name: auto-restore db
          command: |
            if [[ "$CIRCLE_BRANCH" == "release"* ]]; then
              aws lambda invoke \
                  --function-name staging-backups-auto-restore-lambda \
                  --log-type Tail \
                  --invocation-type RequestResponse \
                  --payload '{ "connection_string": "'"${STAGING_MONGOOSE_URI}"'","database_name":"'"${STAGING_MONGODB_NAME}"'","db_webserver_password":"'"${BACKUP_SERVER_PASS}"'","db_webserver_user":"'"${BACKUP_SERVER_USER}"'"}' \
                  outputfile.txt
              LAMBDA_STATUS_CODE=$(<outputfile.txt)
              if [ "${LAMBDA_STATUS_CODE}" -eq 1 ]; then  
                 exit 1
              fi
            fi
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: "phoenix-circleci-notifications"
  build-chrome-extension:
    docker:
      - image: cimg/node:15.14.0
    steps:
      - checkout
      - run:
          name: install python
          command: sudo apt-get update -y && sudo apt-get install -y python
      - run:
          name: set deployment environment
          command: |
            if [ $CIRCLE_BRANCH = "master" ]; then
              echo 'export ENV=prod' >> $BASH_ENV
            elif [ $CIRCLE_BRANCH = "qa" ]; then
              echo 'export ENV=qa' >> $BASH_ENV
            elif [[ "$CIRCLE_BRANCH" == "release"* ]]; then
              echo 'export ENV=staging' >> $BASH_ENV
            fi
      - run:
          name: build chrome extension
          command: cd themis && ./build.sh $ENV
      - run:
          name: install utilities
          command: sudo apt-get update -y && sudo apt-get install awscli
      - run:
          name: create phoenix profile for aws cli
          command: printf "%s\n%s\n"${AWS_REGION}"\njson" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" | aws configure --profile phoenix
      - run:
          name: push the extension file to s3
          command: filename=$(ls themis | grep Sema_Code_Review_Assistant_ | head -1) && aws s3 cp themis/$filename s3://$ENV-chrome-store/$filename --profile phoenix
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: "phoenix-circleci-notifications"      
  phoenix-notify:
    docker:
        - image: cimg/base:2020.01
    steps: 
      - checkout
      - slack/notify:
          event: pass
          template: basic_success_1
workflows:
  version: 2
  primary:
    jobs:
      - deploy-web:
          filters:
            branches:
              only:
                - qa
                - master
                - /release-.*/
      - deploy-apollo:
          filters:
            branches:
              only:
                - qa
                - master
                - /release-.*/
      - build-chrome-extension:
          filters:
            branches:
              only:
                - qa
                - master
                - /release-.*/
      - test-web:
          filters:
            branches:
              only:
                - /release-.*/
                - DVPS-125
      - phoenix-notify:
          context: 
           - slack-secrets
          filters:
            branches:
              only:
                - qa
                - master
                - /release-.*/
          requires:
            - build-chrome-extension
            - deploy-web
            - deploy-apollo
