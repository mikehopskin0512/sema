#!/usr/bin/env groovy
pipeline {
    agent {
        docker {
            image 'cimg/base:2022.01'
            args '-u root --privileged --net host -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        BRANCH_NAME = "${GIT_BRANCH.split('/')[1]}"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timestamps()
    }

    stages {
        stage('Install dependencies') {
            steps {
                sh 'sudo apt-get update -y && sudo apt-get install -y jq awscli'
            }
        }

        stage('Build web') {
            steps {
                script {
                    release_regex = '(.*release.*)'
                    switch (BRANCH_NAME) {
                    case 'master':
                            ENVIRONMENT = 'prod'
                            buildWeb(ENVIRONMENT, BRANCH_NAME)
                            break
                    case ['qa']:
                            ENVIRONMENT = 'qa'
                            buildWeb(ENVIRONMENT, BRANCH_NAME)
                            break
                    case ['qa1']:
                            ENVIRONMENT = 'qa1'
                            buildWeb(ENVIRONMENT, BRANCH_NAME)
                            break
                    case ~/$release_regex/:
                            ENVIRONMENT = 'staging'
                            buildWeb(ENVIRONMENT, BRANCH_NAME)
                            break
                    default:
                            ENVIRONMENT = 'undefined'
                            error('Aborting the build. The environment is ' + ENVIRONMENT) // Abort the build
                            break
                    }
                }
            }
        }

        stage('Deploy web') {
            steps {
                script {
                    withAWS(role:'jenkins-role-to-assume') {
                        deployWeb(ENVIRONMENT, BRANCH_NAME)
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                def blocks = [
                        [
                            'type': 'header',
                            'text': [
                                'type': 'plain_text',
                                'text': 'Job Failed. :red_circle:',
                                'emoji': true
                        ]
                        ],
                        [
                            'type': 'section',
                            'fields': [
                                [
                                    'type': 'mrkdwn',
                                    'text': "*Job*: ${env.JOB_NAME}"
                                ]
                            ]
                        ],
                        [
                            'type': 'section',
                            'fields': [
                                [
                                    'type': 'mrkdwn',
                                    'text': '*Project*: phoenix'
                                ],
                                [
                                    'type': 'mrkdwn',
                                    'text': "*Branch*: ${BRANCH_NAME}"
                                ]
                            ],
                            'accessory': [
                                'type': 'image',
                                'image_url': 'https://slack.engineering/wp-content/uploads/sites/7/2021/05/jenkins-fire.png?resize=1280,955',
                                'alt_text': 'Sema logo'
                            ]
                        ],
                        [
                            'type': 'actions',
                            'elements': [
                                [
                                    'type': 'button',
                                    'text': [
                                        'type': 'plain_text',
                                        'text': 'View Job'
                                    ],
                                    'url': "${BUILD_URL}console"
                                ]
                            ]
                        ]
                    ]
                slackSend(
                blocks: blocks,
                channel: '#phoenix-circleci-notifications',
                color: 'danger'
                )
            }
        }
    }
}

def buildWeb(String environment, String branchName) {
    dir('web') {
        sh './build.sh ' + environment + ' ' + branchName
    }
}

def deployWeb(String environment, String branchName) {
    dir('web') {
        sh './deploy.sh ' + environment + ' ' + branchName
    }
}
