#!/usr/bin/env groovy
pipeline {
    agent {
        docker {
            image 'cimg/base:2020.01'
            args '-u root --privileged --net host -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        retry(2)
        timestamps()
    }

    stages {
        stage('Install dependencies') {
            steps {
                sh 'sudo apt-get update -y && sudo apt-get install -y jq awscli'
            }
        }

        stage('Create phoenix profile for aws cli') {
            steps {
                script {
                    release_regex = '(.*/release.*|.*/DVPS-268)'
                    switch (GIT_BRANCH) {
                    case 'master':
                            ENVIRONMENT = 'prod'
                            buildWeb(ENVIRONMENT)
                            break
                    case ['qa']:
                            ENVIRONMENT = 'qa'
                            buildWeb(ENVIRONMENT)
                            break
                    case ['qa1']:
                            ENVIRONMENT = 'qa1'
                            buildWeb(ENVIRONMENT)
                            break
                    case ~/$release_regex/:
                            ENVIRONMENT = 'staging'
                            buildWeb(ENVIRONMENT)
                            break
                    default:
                            ENVIRONMENT = 'undefined'
                            error('Aborting the build. The environment is ' + environment) // Abort the build
                            break
                    }
                }
            // withAWS(role:'jenkins-role-to-assume') {
            //     sh 'aws s3 ls'
            // }
            }
        }
    }
}

def buildWeb(String environment) {
    dir('web') {
        sh './build.sh ' + environment
    }
}
