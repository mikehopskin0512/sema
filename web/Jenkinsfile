#!/usr/bin/env groovy
@Library('customSlackLibrary') _
pipeline {
    agent {
        docker {
            image 'cimg/base:2022.01'
            args '-u root --privileged --net host -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    parameters {
        string(name: 'ENVIRONMENT', description: 'The name of environment for building')
        string(name: 'BRANCH_NAME', description: 'The name of branch for building')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
    }

    stages {
        stage('Install dependencies') {
            steps {
                sh 'sudo apt-get update -y && sudo apt-get install -y jq awscli'
            }
        }

        stage("Create branch file"){
            steps{
                writeFile file: 'web/branch.txt', text: "export BRANCH=${params.ENVIRONMENT}"
            }
        }

        stage('Kick off codebuild project') {
            steps {
                awsCodeBuild credentialsType: 'keys', projectName: "${params.ENVIRONMENT}-scr-phoenix-build", region: 'us-east-1', sourceControlType: 'jenkins'
            }
        }

        stage('Deploy web') {
            steps {
                script {
                    withAWS(role:'jenkins-role-to-assume') {
                        deployWeb(params.ENVIRONMENT, params.BRANCH_NAME)
                    }
                }
            }
        }
    }

    post {
        failure {
            slackSendsFail(env.JOB_NAME, params.BRANCH_NAME, BUILD_URL)
        }

        always{
            cleanWs()
        }
    }
}

def deployWeb(String environment, String branchName) {
    dir('web') {
        sh './deploy.sh ' + environment + ' ' + branchName
    }
}
